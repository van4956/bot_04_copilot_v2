version: '3.9'

services:
  bot:
    build: . # Строим образ из текущей директории
    container_name: container_bot
    depends_on:
      - db # Контейнер бота зависит от базы данных
      - redis # Контейнер бота зависит от Redis
      - influxdb # Контейнер бота зависит от InfluxDB
    deploy:
      resources: # Ограничения ресурсов
        limits:
          memory: 512M
        reservations:
          memory: 128M
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_TOKEN_2=${BOT_TOKEN_2}
      - OWNER=${OWNER}
      - ADMIN_LIST=${ADMIN_LIST}
      - HOME_GROUP=${HOME_GROUP}
      - WORK_GROUP=${WORK_GROUP}
      - PAYMASTER_PROVIDER_TOKEN=${PAYMASTER_PROVIDER_TOKEN}
      - API_GPT=${API_GPT}
      - API_WEATHER=${API_WEATHER}
      - API_CURRENCY=${API_CURRENCY}
      - DB_POST=${DB_POST}
      - DB_LITE=${DB_LITE}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - botnet # Подключение к сети botnet
    restart: unless-stopped # Автоматический перезапуск контейнера, если он остановится

  db:
    image: postgres:15 # Образ PostgreSQL версии 15
    container_name: container_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database/postgres/db:/var/lib/postgresql/data # Сохраняем данные базы данных на локальном диске
    ports:
      - "5432:5432"
    networks:
      - botnet
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine # Образ Redis версии Alpine
    container_name: container_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Сохраняем данные Redis как Docker volume
    networks:
      - botnet
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7 # Образ InfluxDB версии 2.0
    container_name: container_influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_URL=${INFLUXDB_URL}
    volumes:
      - ./database/influxdb:/var/lib/influxdb2 # Сохраняем данные InfluxDB на локальном диске
    ports:
      - "8086:8086"
    networks:
      - botnet
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0 # Образ Grafana для визуализации данных
    container_name: container_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - ./database/grafana:/var/lib/grafana # Сохраняем данные Grafana на локальном диске
    networks:
      - botnet
    restart: unless-stopped

networks:
  botnet:
    name: botnet    # Принудительно задаем имя сети
    driver: bridge # Используем драйвер bridge для создания сети

volumes:
  redis_data:
    driver: local # Используем локальный драйвер для хранения данных Redis

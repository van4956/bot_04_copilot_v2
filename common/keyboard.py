import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, KeyboardButtonPollType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from aiogram.utils.i18n import gettext as _



# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
del_kb = ReplyKeyboardRemove()

# del_inline_kb = ReplyI


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(
    *btns: str,
    placeholder: str | None = None,
    request_contact: int | None = None,
    request_location: int | None = None,
    sizes: tuple = (2,),
):
    '''
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã request_contact –∏ request_location –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ btns –¥–ª—è –Ω—É–∂–Ω—ã—Ö –≤–∞–º –∫–Ω–æ–ø–æ–∫.
    –ü—Ä–∏–º–µ—Ä:
    get_keyboard("–ú–µ–Ω—é", "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã", "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", request_contact=3, sizes=(2, 2, 1))
    '''
    keyboard = ReplyKeyboardBuilder()

    for index, text in enumerate(btns, start=0):
        if request_contact and request_contact == index:
            keyboard.add(KeyboardButton(text=text, request_contact=True))
        elif request_location and request_location == index:
            keyboard.add(KeyboardButton(text=text, request_location=True))
        else:
            keyboard.add(KeyboardButton(text=text))

    return keyboard.adjust(*sizes).as_markup(resize_keyboard=True, # —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–º–µ–Ω—å—à–µ
                                             input_field_placeholder=placeholder) # –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç placeholder


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def start_keyboard():
    return get_keyboard(_("–ü–æ–≥–æ–¥–∞ üåä"), _("–í–∞–ª—é—Ç–∞ üíµ"), _("–ö–æ—Ç–∏–∫–∏ üê±"), _("LLMs ü§ñ"), sizes=(2, 2, ), placeholder='‚¨áÔ∏è')


# —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º
def get_callback_btns(*, # –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                      btns: dict[str, str], # –ø–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏–∫ text:data, text —Ç–æ —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, data —Ç–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
                      sizes: tuple = (2,)): # –∫–æ—Ä—Ç–µ–∂, —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    """—Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º"""

    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data)) # —Å–æ–±—ã—Ç–∏–µ callback_data

    return keyboard.adjust(*sizes).as_markup()


# —Å–æ–∑–¥–∞—Ç—å inline –∫–Ω–æ–ø–∫–∏ —Å url —Å—Å—ã–ª–∫–∞–º–∏
def get_url_btns(*,
                 btns: dict[str, str],
                 sizes: tuple = (2,)):
    """—Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å url —Å—Å—ã–ª–∫–∞–º–∏"""

    keyboard = InlineKeyboardBuilder()

    for text, url in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, url=url))

    return keyboard.adjust(*sizes).as_markup()


# —Å–æ–∑–¥–∞—Ç—å –º–∏–∫—Å –∏–∑ CallBack –∫–Ω–æ–ø–æ–∫ –∏ URL –∫–Ω–æ–ø–æ–∫
def get_inlineMix_btns(*,
                       btns: dict[str, str],
                       sizes: tuple = (2,)):
    """—Å–æ–∑–¥–∞—Ç—å –º–∏–∫—Å –∏–∑ CallBack –∫–Ω–æ–ø–æ–∫ –∏ URL –∫–Ω–æ–ø–æ–∫"""

    keyboard = InlineKeyboardBuilder()

    for text, value in btns.items():
        if '://' in value:
            keyboard.add(InlineKeyboardButton(text=text, url=value))
        else:
            keyboard.add(InlineKeyboardButton(text=text, callback_data=value))

    return keyboard.adjust(*sizes).as_markup()

# inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ç–æ—á–∫–æ–π, —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ –≤–≤–æ–¥–æ–º
def markup_num():
    """inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ç–æ—á–∫–æ–π, —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ –≤–≤–æ–¥–æ–º"""
    buttons = [
                        [InlineKeyboardButton(text=" 1 ", callback_data="num_1"),
                        InlineKeyboardButton(text="   2   ", callback_data="num_2"),
                        InlineKeyboardButton(text=" 3 ", callback_data="num_3")],
                        [InlineKeyboardButton(text=" 4 ", callback_data="num_4"),
                        InlineKeyboardButton(text=" 5 ", callback_data="num_5"),
                        InlineKeyboardButton(text="   6   ", callback_data="num_6")],
                        [InlineKeyboardButton(text=" 7 ", callback_data="num_7"),
                        InlineKeyboardButton(text=" 8 ", callback_data="num_8"),
                        InlineKeyboardButton(text=" 9 ", callback_data="num_9")],
                        [InlineKeyboardButton(text=" 0 ", callback_data="num_0"),
                         InlineKeyboardButton(text=" 000 ", callback_data="num_000"),
                         InlineKeyboardButton(text=" . ", callback_data="num_com")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è delete", callback_data="num_del"),
                        InlineKeyboardButton(text="enter ‚ñ∂Ô∏è", callback_data="num_enter")]
                    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å 9 —Ü–∏—Ñ—Ä–∞–º–∏
def markup_num_9():
    """inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å 9 —Ü–∏—Ñ—Ä–∞–º–∏"""
    buttons = [
                        [InlineKeyboardButton(text=" 1 ", callback_data="num_1"),
                        InlineKeyboardButton(text=" 2 ", callback_data="num_2"),
                        InlineKeyboardButton(text=" 3 ", callback_data="num_3")],
                        [InlineKeyboardButton(text=" 4 ", callback_data="num_4"),
                        InlineKeyboardButton(text=" 5 ", callback_data="num_5"),
                        InlineKeyboardButton(text=" 6 ", callback_data="num_6")],
                        [InlineKeyboardButton(text=" 7 ", callback_data="num_7"),
                        InlineKeyboardButton(text=" 8 ", callback_data="num_8"),
                        InlineKeyboardButton(text=" 9 ", callback_data="num_9")],
                    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
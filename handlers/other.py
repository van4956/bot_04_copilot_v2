import asyncio
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

import psutil
from datetime import datetime
from pathlib import Path
import os

from aiogram import Router, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.i18n import gettext as _


from database.orm_users import orm_update_locale
from common import keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
other_router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@other_router.message(Command('info'))
async def process_help_command(message: Message, workflow_data: dict, state: FSMContext):
    await message.answer(_('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), reply_markup=keyboard.del_kb)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text=_('–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'), callback_data='terms')],
        [InlineKeyboardButton(text=_('–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'), callback_data='lang')],
        [InlineKeyboardButton(text=_('–û–± –∞–≤—Ç–æ—Ä–µ'), callback_data='author')],
        [InlineKeyboardButton(text=_('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'), callback_data='donate')],
        [InlineKeyboardButton(text=_('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'), callback_data='about_back_to_main')]
    ]
    inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    try:
        process = psutil.Process()

        memory = process.memory_info().rss / 1024 / 1024
        cpu = process.cpu_percent(interval=0.1) # interval=0.1 - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º uptime –≤ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        uptime = datetime.now() - datetime.fromtimestamp(process.create_time())
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        formatted_uptime = f"{days}d {hours:02}:{minutes:02}:{seconds:02}"

        text = (
            f"üìä Status of Bot - @Terminatorvan_bot\n\n"
            f"üî∏ <code>RAM:  {memory:.1f}MB</code>\n"
            f"üî∏ <code>CPU:  {cpu}%</code>\n"
            f"üî∏ <code>Time: {formatted_uptime}</code>\n"
        )

    except Exception as e:
        text = (f"üìä Status of Bot - @Terminatorvan_bot\n\nError: {e}")

    msg = await message.answer(
        text=text,
        reply_markup=inline_kb
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ FSMContext
    await state.update_data(last_message_id=msg.message_id)

    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    analytics = workflow_data['analytics']
    await analytics(user_id=message.from_user.id,
                    category_name="/options",
                    command_name="/info")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_keyboard():
    button_1 = InlineKeyboardButton(text=_('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'), callback_data='locale_en')
    button_2 = InlineKeyboardButton(text=_('üá∑üá∫ –†—É—Å—Å–∫–∏–π'), callback_data='locale_ru')
    button_3 = InlineKeyboardButton(text=_('üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π'), callback_data='locale_de')
    button_5 = InlineKeyboardButton(text=_('üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π'), callback_data='locale_ja')
    button_6 = InlineKeyboardButton(text=_('–ù–∞–∑–∞–¥'), callback_data='back_to_info')
    button_7 = InlineKeyboardButton(text=_('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'), callback_data='about_back_to_main') # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ private.py

    return InlineKeyboardMarkup(inline_keyboard=[[button_1, button_2], [button_3, button_5], [button_6], [button_7]])


# –≠—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
@other_router.callback_query(F.data == "lang")
async def locale_cmd(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"), reply_markup=keyboard.del_kb)
    msg =await callback.message.answer(
        text=_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç'),
        reply_markup=get_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ FSMContext
    await state.update_data(last_message_id=msg.message_id)


@other_router.callback_query(F.data.startswith("locale_"))
async def update_locale_cmd(callback: CallbackQuery, session: AsyncSession, state: FSMContext, workflow_data: dict):
    user_id = callback.from_user.id

    if callback.data == 'locale_en':
        await orm_update_locale(session, user_id, 'en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # await callback.message.edit_text('Choose a language ', reply_markup=None)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.delete()
        await callback.answer("Selected: üá∫üá∏ English")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Current language \n\n üá∫üá∏ English", # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("Weather üåä", "Currency üíµ", "Cats üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    elif callback.data == 'locale_ru':
        await orm_update_locale(session, user_id, 'ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ ', reply_markup=None)   # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.delete()
        await callback.answer("–í—ã–±—Ä–∞–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ \n\n üá∑üá∫ –†—É—Å—Å–∫–∏–π", # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("–ü–æ–≥–æ–¥–∞ üåä", "–í–∞–ª—é—Ç–∞ üíµ", "–ö–æ—Ç–∏–∫–∏ üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    elif callback.data == 'locale_de':
        await orm_update_locale(session, user_id, 'de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # await callback.message.edit_text('W√§hlen Sie eine Sprache ', reply_markup=None)  # type: ignore # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,—Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.delete()
        await callback.answer("Ausgew√§hlt: üá©üá™ Deutsch")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Aktuelle Sprache \n\n üá©üá™ Deutsch",   # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("Wetter üåä", "W√§hrung üíµ", "Katzen üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    elif callback.data == 'locale_ja':
        await orm_update_locale(session, user_id, 'ja')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='ja')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # await callback.message.edit_text('Ë®ÄË™û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ ', reply_markup=None)  # type: ignore # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,—Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.delete()
        await callback.answer("ÈÅ∏Êäû„Åï„Çå„Åü: üáØüáµ Êó•Êú¨Ë™û")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("ÁèæÂú®„ÅÆË®ÄË™û \n\n üáØüáµ Êó•Êú¨Ë™û",   # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("„ÉÜ„É≥„Ç≠ üåä", "„Ç´„ÉØ„Çª üíµ", "„Éç„Ç≥ üê±", "„Ç®„É´„Ç®„É´„Ç®„É† ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/language")


# —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä, –ø–æ–∫–∞–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@other_router.message(Command("data"))
async def data_cmd(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(str(data))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ inline –∫–Ω–æ–ø–∫—É /terms
@other_router.callback_query(F.data == "terms")
async def terms_cmd(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    last_message_id = data.get('last_message_id')

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if last_message_id:
        try:
            await callback.bot.delete_message(chat_id=user_id,
                                                message_id=last_message_id)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ last_message_id —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
    else:
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    await callback.message.answer(_("–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"))
    text = _("Terms of use @Terminatorvan_bot:\n\n"
              "1. –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –û–Ω –Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ –º–∏—Ä–æ–≤–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ (–ø–æ–∫–∞ —á—Ç–æ).\n\n"
              "2. –ë–æ—Ç —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –±—ã—Ç—å —Ç–æ—á–Ω—ã–º, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è. –û–Ω –≤—Å—ë-—Ç–∞–∫–∏ –Ω–µ —á–µ–ª–æ–≤–µ–∫, –∞ –ø—Ä–æ—Å—Ç–æ –æ—á–µ–Ω—å —É–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.\n\n"
              "3. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–∏–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã –∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å—Ç—Ä–æ–≥–∏–π –æ—Ç–±–æ—Ä –Ω–∞ –º–∏–ª–æ—Ç—É.\n\n"
              "4. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –±–µ—Ä—É—Ç—Å—è –∏–∑ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
              "5. –û–±—â–µ–Ω–∏–µ —Å –ò–ò (LLM) –º–æ–¥—É–ª–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ - —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.\n\n"
              "6. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∏—Ü—Ü—ã –ø–æ–º–æ–∂–µ—Ç —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏, –Ω–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–∏—Ü—Ü—ã –≤—Å–µ–≥–¥–∞ –∑–∞ –≤–∞–º–∏!\n\n"
              "7. –í—Å–µ –¥–æ–Ω–∞—Ç—ã –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ. –ë–æ—Ç –±—É–¥–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω –∫–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
              "8. –í —Å–ª—É—á–∞–µ —Å–±–æ–µ–≤ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.\n\n")
    button_1 = InlineKeyboardButton(text=_("–ù–∞–∑–∞–¥"), callback_data="back_to_info")
    button_2 = InlineKeyboardButton(text=_('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'), callback_data='about_back_to_main') # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ private.py
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2]])

    msg = await callback.message.answer(text, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ FSMContext
    await state.update_data(last_message_id=msg.message_id)


# callback "–Ω–∞–∑–∞–¥" –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
@other_router.callback_query(F.data == 'back_to_info')
async def cmd_callback_about(callback: CallbackQuery, state: FSMContext, workflow_data: dict):
    user_id = callback.from_user.id
    data = await state.get_data()
    last_message_id = data.get('last_message_id')

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if last_message_id:
        try:
            await callback.bot.delete_message(chat_id=user_id,
                                                message_id=last_message_id)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ last_message_id —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
    else:
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏

    buttons = [
        [InlineKeyboardButton(text=_('–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'), callback_data='terms')],
        [InlineKeyboardButton(text=_('–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'), callback_data='lang')],
        [InlineKeyboardButton(text=_('–û–± –∞–≤—Ç–æ—Ä–µ'), callback_data='author')],
        [InlineKeyboardButton(text=_('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'), callback_data='donate')],
        [InlineKeyboardButton(text=_('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'), callback_data='about_back_to_main')]
    ]
    inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    try:
        process = psutil.Process()

        memory = process.memory_info().rss / 1024 / 1024  # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
        cpu = process.cpu_percent(interval=0.1) # interval=0.1 - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º uptime –≤ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        uptime = datetime.now() - datetime.fromtimestamp(process.create_time())
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        formatted_uptime = f"{days}d {hours:02}:{minutes:02}:{seconds:02}"

        text = (
            f"üìä Status of Bot - @Terminatorvan_bot\n\n"
            f"üî∏ <code>RAM:  {memory:.1f}MB</code>\n"
            f"üî∏ <code>CPU:  {cpu}%</code>\n"
            f"üî∏ <code>Time: {formatted_uptime}</code>\n"
        )

    except Exception as e:
        text = (f"üìä Status of Bot - @Terminatorvan_bot\n\nError: {e}")

    msg = await callback.message.answer(
        text=text,
        reply_markup=inline_kb
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ FSMContext
    await state.update_data(last_message_id=msg.message_id)

    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/info")

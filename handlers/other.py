import asyncio
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')


from aiogram import Router, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.i18n import gettext as _

from database.orm_users import orm_update_locale
from common import keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
other_router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@other_router.message(Command('info'))
async def process_help_command(message: Message, workflow_data: dict):
    await message.answer(
        text=_('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
               '/book - –∫–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n'
               '/mini - –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n'
               '/lang - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n'
               '/help - –ø–æ–º–æ—â—å\n'
               '/donate - –¥–æ–Ω–∞—Ç –∞–≤—Ç–æ—Ä—É\n'
               )
    )
    analytics = workflow_data['analytics']
    await analytics(user_id=message.from_user.id,
                    category_name="/options",
                    command_name="/info")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_keyboard():
    button_1 = InlineKeyboardButton(text=_('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'), callback_data='locale_en')
    button_2 = InlineKeyboardButton(text=_('üá∑üá∫ –†—É—Å—Å–∫–∏–π'), callback_data='locale_ru')
    button_3 = InlineKeyboardButton(text=_('üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π'), callback_data='locale_de')
    # button_4 = InlineKeyboardButton(text=_('üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'), callback_data='locale_fr')
    # button_5 = InlineKeyboardButton(text=_('üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π'), callback_data='locale_ja')

    return InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2], [button_3]])


# –≠—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É locale
@other_router.message(Command('lang'))
async def locale_cmd(message: Message):
    await message.answer(_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"), reply_markup=keyboard.del_kb)
    await message.answer(text=_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'),
                         reply_markup=get_keyboard())


@other_router.callback_query(F.data.startswith("locale_"))
async def update_locale_cmd(callback: CallbackQuery, session: AsyncSession, state: FSMContext, workflow_data: dict):
    user_id = callback.from_user.id

    if callback.data == 'locale_en':
        await orm_update_locale(session, user_id, 'en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='en')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('Choose a language ', reply_markup=None)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("Selected: üá∫üá∏ English")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Current language \n\n üá∫üá∏ English", # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("Weather üåä", "Currency üíµ", "Cats üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    elif callback.data == 'locale_ru':
        await orm_update_locale(session, user_id, 'ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='ru')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ ', reply_markup=None)   # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("–í—ã–±—Ä–∞–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ \n\n üá∑üá∫ –†—É—Å—Å–∫–∏–π", # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("–ü–æ–≥–æ–¥–∞ üåä", "–í–∞–ª—é—Ç–∞ üíµ", "–ö–æ—Ç–∏–∫–∏ üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    elif callback.data == 'locale_de':
        await orm_update_locale(session, user_id, 'de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –±–¥
        await state.update_data(locale='de')  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await callback.message.edit_text('W√§hlen Sie eine Sprache ', reply_markup=None)  # type: ignore # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,—Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.answer("Ausgew√§hlt üá©üá™ Deutsch")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
        await callback.message.answer("Aktuelle Sprache \n\n üá©üá™ Deutsch",   # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                      reply_markup=keyboard.get_keyboard("Wetter üåä", "W√§hrung üíµ", "Katzen üê±", "LLMs ü§ñ", sizes=(2, 2, ), placeholder='‚¨áÔ∏è'))

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/options",
                    command_name="/language")

# —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä, –ø–æ–∫–∞–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@other_router.message(Command("data"))
async def data_cmd(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(str(data))

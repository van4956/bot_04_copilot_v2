import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')


import asyncio
import requests
import random as r
import os

from aiogram import F, Router
from aiogram.types import InlineKeyboardButton, FSInputFile, Message, CallbackQuery
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __
from sqlalchemy.ext.asyncio import AsyncSession

from common import keyboard
from filters.chat_type import ChatTypeFilter


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
private_router = Router()
private_router.message.filter(ChatTypeFilter(['private']))
private_router.edited_message.filter(ChatTypeFilter(['private']))

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö
BACK_TO_MAIN = __("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è")
CATS = __("–ö–æ—Ç–∏–∫–∏ üê±")

# –∫–æ–º–∞–Ω–¥–∞ /main, –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
@private_router.message(or_f(Command("main"), F.text == BACK_TO_MAIN))
async def cancel_cmd(message: Message, state: FSMContext):
    await state.set_state(None)
    await message.answer(_('–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'), reply_markup=keyboard.start_keyboard())

# —Å–∏–º–≤–æ–ª —Ç–æ—á–∫–∞ - –û–¢–ú–ï–ù–ê, —Å–±—Ä–æ—Å –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è;
# –ª–æ–≤–∏–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç "."
@private_router.message(StateFilter("*"), F.text.casefold() == ".")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state() # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state is None: # –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É—Å—Ç–æ–µ, —Ç–æ –Ω–∏ —á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è FSMContext
    await state.set_state(None)
    await message.answer(_("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã"))
    await asyncio.sleep(1)
    await message.answer(_('–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'), reply_markup=keyboard.start_keyboard())


# –∫–æ–º–∞–Ω–¥–∞ /help
@private_router.message(Command("help"))
async def about_cmd(message: Message, workflow_data: dict):
    await message.answer(_("–ø–æ–º–æ—â—å ..."), reply_markup=keyboard.del_kb)
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="Telegram",url="tg://user?id=459148628"))
    builder.row(InlineKeyboardButton(text="Linkedin",url="https://www.linkedin.com/in/ivan-goncharov-8a1982212/"))
    builder.row(InlineKeyboardButton(text="GitHub", url="https://github.com/van4956"))
    builder.row(InlineKeyboardButton(text="Kaggle",url="https://www.kaggle.com/ivan4956"))
    builder.row(InlineKeyboardButton(text=_("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"), callback_data='about_back_to_main'))
    image_from_pc = FSInputFile("common/images/image_about.jpg")
    await asyncio.sleep(1)
    await message.answer_photo(image_from_pc,
                               caption=_('... –≤ –º–∏—Ä–µ, –≥–¥–µ –º–∞—à–∏–Ω—ã —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –≥–æ—Å–ø–æ–¥—Å—Ç–≤—É, –æ–Ω –≤—ã–±—Ä–∞–ª —Å—É–¥—å–±—É –≥–µ—Ä–æ—è, '
                                         '—Å–æ–∑–¥–∞–≤–∞—è –±–æ—Ç–æ–≤, –∫–∞–∫ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–ø–∞—Å–µ–Ω–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–¥ –∏ —É–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.'),
                                reply_markup=builder.adjust(2,2,1,).as_markup())

    analytics = workflow_data['analytics']
    await analytics(user_id=message.from_user.id,
                    category_name="/options",
                    command_name="/help")

# callback "–Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
@private_router.callback_query(F.data == 'about_back_to_main')
async def callback_about(callback: CallbackQuery):
    # await callback.message.edit_caption(caption=_('... –æ –º–∏—Ä–µ, –≥–¥–µ –º–∞—à–∏–Ω—ã —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –≥–æ—Å–ø–æ–¥—Å—Ç–≤—É, –æ–Ω –≤—ã–±—Ä–∞–ª —Å—É–¥—å–±—É –≥–µ—Ä–æ—è, '
    #                                                 '—Å–æ–∑–¥–∞–≤–∞—è –±–æ—Ç–æ–≤, –∫–∞–∫ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–ø–∞—Å–µ–Ω–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–¥ –∏ —É–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.'),
    #                                     reply_markup=None)
    await callback.message.delete()
    await callback.answer(_('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'))
    await asyncio.sleep(1)
    await callback.message.answer(_('–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'), reply_markup=keyboard.start_keyboard())

# –∫–Ω–æ–ø–∫–∞ "–ö–æ—Ç–∏–∫–∏"
@private_router.message(F.text == CATS)
async def cat_cmd(message: Message, workflow_data: dict):
    user_id = message.from_user.id

    # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 20% –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ö–µ—Ç
    if r.random() < 0.2:
        image_folder = 'common/image_cat'
        images = [f'common/image_cat/{img}' for img in os.listdir(image_folder) if img.endswith('.jpg')]

        if images:
            random_image = r.choice(images)
            photo = FSInputFile(random_image)
            await message.answer_photo(photo)
            return
        else:
            await message.answer(_('–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'))

    cat_response = requests.get('https://api.thecatapi.com/v1/images/search', timeout=10)
    try:
        if cat_response.status_code == 200:
            if cat_response.json()[0]['url'][-3:].lower() in ['jpg','png']:
                cat_link = cat_response.json()[0]['url']
                await message.answer_photo(cat_link)
            else:
                cat_link = cat_response.json()[0]['url']
                await message.answer_document(cat_link)
        else:
            await message.answer(_('–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∫–æ—Ç–∏–∫–æ–º :('))

    except Exception as e:
        logger.error("Error: %s", str(e))
        text_error = f'Error:\n{str(e)}'
        await message.answer(text_error)

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/service",
                    command_name="/cat")

import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

import requests
import os
from datetime import datetime, timezone
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.filters import  StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __
from common import keyboard
from filters.chat_type import ChatTypeFilter

# —Å–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–∞–ª—é—Ç—ã
currency_router = Router()
currency_router.message.filter(ChatTypeFilter(['private']))

# api token –¥–ª—è —Å–∞–π—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å
api_currency = os.getenv('API_CURRENCY')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–∞–ª—é—Ç—ã
class Currency(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–∞–ª—é—Ç—ã"""
    amount = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
    base_currency = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
    target_currency = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö
CURRENCY = __("–í–∞–ª—é—Ç–∞ üíµ")
REPEAT = __("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üíµ")
BACK_TO_MAIN = __("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è")

async def update_num_text(message: Message, new_value: str):
    """—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await message.edit_text(_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {new_value}").format(new_value=new_value),
                            reply_markup=keyboard.markup_num())

markup_cur = keyboard.get_callback_btns(btns={'$, USD üá∫üá∏':'USD', '‚ÇΩ, RUB üá∑üá∫':'RUB', '‚Çæ, GEL üá¨üá™':'GEL',
                                                                            '‚Ç¨, EUR üá™üá∫':'EUR', '‚Ç∏, KZT üá∞üáø':'KZT', '‚Ç∫, TRY üáπüá∑':'TRY',
                                                                            '¬•, JPY üáØüáµ':'JPY', '‚Ç´, VND üáªüá≥':'VND', '¬• CNY üá®üá≥':'CNY',
                                                                            '‚Ç™, ILS üáÆüá±': 'ILS', '‚Ç±, PHP üáµüá≠': 'PHP', 'AED üá¶üá™': 'AED'},
                                                                            sizes=(3, 3, 3, 3,))
"""inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç"""


def get_currency_rate(base_currency, target_currency):
    """—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–æ—Å—Å –∫—É—Ä—Å–∞"""
    url = f'https://openexchangerates.org/api/latest.json?app_id={api_currency}'
    response = requests.get(url, timeout=20)
    try:
        if response.status_code == 200:
            try:
                data = response.json()
                base_rate = data['rates'].get(base_currency, 1.0)
                target_rate = data['rates'].get(target_currency, 1.0)
                rate = target_rate / base_rate
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞: %s", str(e))
                rate = _('–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫—É—Ä—Å–∞')
            try:
                if 'timestamp' in data:
                    dt_object = datetime.fromtimestamp(data['timestamp'], tz=timezone.utc)
                    time = dt_object.strftime('%H:%M')
                    dt = dt_object.strftime('%d-%m-%Y')
                else:
                    raise ValueError("No timestamp in data")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞: %s", str(e))
                time = _('–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏.')
                dt = _('–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –¥–∞—Ç—ã.')

            return time, dt, rate

        else:
            return 'time', 'dt', _('–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API')

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞: %s", str(e))
        return 'time', 'dt', "Error: {str(e)}"




@currency_router.message(StateFilter(None), or_f(F.text == CURRENCY, F.text == REPEAT))
async def process_reopen(message: Message, state: FSMContext, workflow_data: dict):
    user_id = message.from_user.id
    await state.update_data(user_value='')
    await message.answer("üíµ", reply_markup=keyboard.del_kb)
    await message.answer(text=_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: 0.0"),
                         reply_markup=keyboard.markup_num())
    await state.set_state(Currency.amount)

    analytics = workflow_data['analytics']
    await analytics(user_id=user_id,
                    category_name="/service",
                    command_name="/currency")

@currency_router.callback_query(Currency.amount, F.data.startswith("num_"))
async def process_amout(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_value = state_data['user_value']
    action = callback.data.split("_")[1]
    try:
        if action == "enter":
            if len(user_value) > 0:
                await callback.message.edit_text(_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {user_value}\n–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: ").format(user_value=float(user_value)),
                                                 reply_markup=markup_cur) # type: ignore
                await state.update_data(currency_amount=user_value)
                await state.set_state(Currency.base_currency)
            else:
                await callback.message.edit_text(_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: 0.0"))
                await callback.message.answer(_("–ß—Ç–æ –¥–∞–ª—å—à–µ?"),
                                              reply_markup=keyboard.get_keyboard(_("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üíµ"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"), placeholder='‚¨áÔ∏è', sizes=(1, 1)))
                await callback.answer()
                await state.set_state(None)
                await state.update_data(currency_amount=None)
        elif action == "del" and len(user_value) > 0:
            user_value = user_value[:-1]
            await state.update_data(user_value=user_value)
            await update_num_text(callback.message, user_value) # type: ignore
        elif action == "del" and len(user_value) == 0:
            pass
        elif action == "com":
            user_value = user_value + '.'
            await state.update_data(user_value=user_value)
            await update_num_text(callback.message, user_value) # type: ignore
        else:
            user_value = user_value + action
            await state.update_data(user_value=user_value)
            await update_num_text(callback.message, user_value) # type: ignore
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞: %s", str(e))
        await callback.message.edit_text(_("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–º–º—ã"))
        await callback.message.answer(text=_("–ß—Ç–æ –¥–∞–ª—å—à–µ?"),
                                      reply_markup=keyboard.get_keyboard(_("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üíµ"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"), placeholder='‚¨áÔ∏è', sizes=(1, 1)))
        await callback.answer(_("–û—à–∏–±–∫–∞"))
        await state.set_state(None)
        await state.update_data(currency_amount=None)


@currency_router.message(Currency.amount)
async def process_amout_(message: Message):
    await message.answer(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏—Å–ø–æ–ª—å–∑—É—è inline –∫–Ω–æ–ø–∫–∏"))

@currency_router.callback_query(Currency.base_currency, F.data)
async def process_base_currency(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    amount = state_data['currency_amount']
    base = callback.data
    await state.update_data(currency_base=base)
    await callback.message.edit_text(_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {amount}\n–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base}\n–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞: ").format(amount=amount, base=base), reply_markup=markup_cur) # type: ignore
    await callback.answer()
    await state.set_state(Currency.target_currency)

@currency_router.message(Currency.base_currency)
async def process_base_currency_(message: Message):
    await message.answer(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è inline –∫–Ω–æ–ø–∫–∏"))


@currency_router.callback_query(Currency.target_currency, F.data)
async def process_target_currency(callback: CallbackQuery, state: FSMContext):
    target = callback.data
    state_data = await state.get_data()
    amount = state_data['currency_amount']
    base = state_data['currency_base']
    time, dt, rate = get_currency_rate(base, target)  # type: ignore
    try:
        count = round(float(amount) * float(rate), 2)
        amount = str(amount)
        count = str(count)
        await callback.message.edit_text(_("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {amount}\n–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base}\n–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞: {target}\n\n<i>{dt},  {time}</i>\n\n<b>{amount} {base}  ~  {count} {target}</b>")
                                         .format(amount=amount, base=base, target=target, dt=dt, time=time, count=count))
        await callback.message.answer(_("–ß—Ç–æ –¥–∞–ª—å—à–µ?"),
                                      reply_markup=keyboard.get_keyboard(_("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üíµ"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"), placeholder='‚¨áÔ∏è', sizes=(1, 1)))
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞: %s", str(e))
        await callback.message.edit_text(f'{dt} {time}\n\nRate: {rate}')
        await callback.message.answer(text=_("–ß—Ç–æ –¥–∞–ª—å—à–µ?"),
                                      reply_markup=keyboard.get_keyboard(_("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üíµ"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"), placeholder='‚¨áÔ∏è', sizes=(1, 1)))
    await callback.answer(_('–£—Å–ø–µ—Ö'))
    await state.set_state(None)
    await state.update_data(currency_amount=None, currency_base=None, currency_target=None)

@currency_router.message(Currency.target_currency)
async def process_target_currency_(message: Message):
    await message.answer(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è inline –∫–Ω–æ–ø–∫–∏"))

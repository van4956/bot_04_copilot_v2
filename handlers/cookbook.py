import asyncio
import logging
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.exceptions import TelegramAPIError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __

from common import keyboard
from database.orm_cookbook import orm_get_recipes
from filters.chat_type import ChatTypeFilter

# —Å–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
cookbook_router = Router()
cookbook_router.message.filter(ChatTypeFilter(['private']))
cookbook_router.edited_message.filter(ChatTypeFilter(['private']))

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö
BACK_TO_MAIN = __("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è")

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cookbook"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
# @cookbook_router.message(Command(commands='book'))
@cookbook_router.message(F.text == "–ö–Ω–∏–≥–∞ üìñ")
async def process_cookbook_command(message: Message, state: FSMContext, session: AsyncSession, workflow_data: dict):
    # photo = FSInputFile("common/images/image_cook.jpg")
    await message.answer(text=_("–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"),
                         reply_markup=keyboard.del_kb)
    user_id = message.from_user.id
    await asyncio.sleep(1)

    try:
        book = await orm_get_recipes(session)
        len_page = len(book)
        state_data = await state.get_data()
        users_page = state_data.get('page', 1)  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏, –ª–∏–±–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –Ω–∞ 1
        # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫ - —Å—Ä–æ—á–Ω–æ!!!
        # caption = ("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", FSInputFile("common\images\image_cookbook.jpg"))
        # —Ü–∏–∫–ª for –ø–æ book, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º caption
        caption = [(f"<b>{rec.recipe_name}</b>\n<i>–ê–≤—Ç–æ—Ä: {rec.author}</i>\n\n{rec.description}", rec.image) for rec in book if rec.recipe_id == users_page]
        text = caption[0][0]
        photo = caption[0][1]

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞
        if len(text) > 1024:
            text = text[:1021] + "..."

        await message.answer_photo(photo=photo,
                                    caption=text,
                                    reply_markup=keyboard.get_callback_btns(btns={' << ': 'backward',
                                                                                    f'{users_page}/{len_page}': 'curr_page',
                                                                                    ' >> ': 'forward',
                                                                                    _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"):'cookbook_back'},
                                                                                sizes=(3,1,)),
                                                                                )

    except (SQLAlchemyError, ValueError) as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cookbook: %s", e)
        await message.answer(_("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cookbook"), reply_markup=keyboard.start_keyboard())

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
@cookbook_router.callback_query(F.data == 'forward')
async def process_forward_press(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        book = await orm_get_recipes(session)
        len_page = len(book)
        state_data = await state.get_data()
        users_page = state_data.get('page', 1)

        if users_page < len_page:
            users_page += 1
            await state.update_data(page=users_page)
            caption = [(f"<b>{rec.recipe_name}</b>\n<i>–ê–≤—Ç–æ—Ä: {rec.author}</i>\n\n{rec.description}", rec.image) for rec in book if rec.recipe_id == users_page]
            text = caption[0][0]
            photo = caption[0][1]

            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞
            if len(text) > 1024:
                text = text[:1021] + "..."

            await callback.message.edit_media(media=InputMediaPhoto(media=photo, caption=text),
                                                reply_markup=keyboard.get_callback_btns(btns={' << ': 'backward', # type: ignore
                                                                                             f'{users_page}/{len_page}': 'curr_page',
                                                                                            ' >> ': 'forward',
                                                                                            _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"):'cookbook_back'},
                                                                                            sizes=(3,1,))
                                                                                            )

        await callback.answer()

    except (SQLAlchemyError, TelegramAPIError) as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '>>': %s", e)
        await callback.answer(_("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '>>'"), reply_markup=keyboard.start_keyboard())



# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
@cookbook_router.callback_query(F.data == 'backward')
async def process_backward_press(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        book = await orm_get_recipes(session)
        len_page = len(book)
        state_data = await state.get_data()
        users_page = state_data.get('page', 1)

        if users_page > 1 and users_page <= len_page:
            users_page -= 1
            await state.update_data(page=users_page)
            caption = [(f"<b>{rec.recipe_name}</b>\n<i>–ê–≤—Ç–æ—Ä: {rec.author}</i>\n\n{rec.description}", rec.image) for rec in book if rec.recipe_id == users_page]
            text = caption[0][0]
            photo = caption[0][1]

            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞
            if len(text) > 1024:
                text = text[:1021] + "..."

            await callback.message.edit_media(media=InputMediaPhoto(media=photo, caption=text),
                                              reply_markup=keyboard.get_callback_btns(btns={' << ': 'backward', # type: ignore
                                                                                            f'{users_page}/{len_page}': 'curr_page',
                                                                                            ' >> ': 'forward',
                                                                                            _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"):'cookbook_back'},
                                                                                    sizes=(3,1,)))

        await callback.answer()

    except (SQLAlchemyError, TelegramAPIError) as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '<<': %s", e)
        await callback.answer(_("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '<<'"), reply_markup=keyboard.start_keyboard())

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
@cookbook_router.callback_query(F.data == 'curr_page')
async def process_curr_page_press(callback: CallbackQuery):
    # message_effect = {"üî•": "5104841245755180586",
    #                                     "üëç": "5107584321108051014",
    #                                     "üëé": "5104858069142078462",
    #                                     "‚ù§Ô∏è": "5159385139981059251",
    #                                     "üéâ": "5046509860389126442",
    #                                     "üí©": "5046589136895476101"}
    # random_emoji, random_effect = random.choice(list(message_effect.items()))
    # emoji_message = await callback.message.answer(text="üî•",message_effect_id='5104841245755180586')
    # await asyncio.sleep(2)
    # await emoji_message.delete()
    await callback.answer("üî•")

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
# –≤–æ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º-–∫–Ω–∏–≥–æ–π
@cookbook_router.callback_query(F.data == 'cookbook_back')
async def process_cookbook_back_press(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # book = await orm_get_recipes(session)
        # state_data = await state.get_data()
        # users_page = state_data.get('page', 1)
        # caption = [(f"<b>{rec.recipe_name}</b>\n<i>–ê–≤—Ç–æ—Ä: {rec.author}</i>\n\n{rec.description}", rec.image) for rec in book if rec.recipe_id == users_page]
        # text = caption[0][0]
        # photo = caption[0][1]
        # await callback.message.edit_media(media=InputMediaPhoto(media=photo, caption=text), reply_markup=None)
        await callback.message.delete()
        await state.set_state(None)
        await callback.answer(_("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"))
        await asyncio.sleep(1)
        await callback.message.answer(_('–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'), reply_markup=keyboard.start_keyboard())

    except (SQLAlchemyError, TelegramAPIError) as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è': %s", e)
        await callback.message.answer(_("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ inline –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è'"), reply_markup=keyboard.start_keyboard())
        await state.set_state(None)

import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from icecream import ic
ic.configureOutput(includeContext=True, prefix=' >>> Debag >>> ')

import requests
import os
import datetime

from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __
from common import keyboard
from filters.chat_type import ChatTypeFilter

# —Å–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
weather_router = Router()
weather_router.message.filter(ChatTypeFilter(['private']))

# api —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∞–π—Ç–∞ –ø–æ–≥–æ–¥—ã
token = os.getenv('API_WEATHER')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
class City(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    forecast_moment = State()
    forecast_period = State()
    city_name_moment = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ç–µ–∫—É—â–µ–º –º–æ–º–µ–Ω—Ç–µ
    city_name_period = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥

dict_weather_descriptions = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞–∫–æ–≤": "üå§",
    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå§",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå•",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "—Å–ª–∞–±—ã–π –¥–æ–∂–¥—å": "üå¶",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üå¶",
    "—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å": "üåß",
    "–¥–æ–∂–¥—å": "üåß",
    "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "üåß",
    "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "üåß",
    "–ø—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å": "üåß",
    "–º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å": "üåß",
    "–º–æ—Ä–æ—Å—å": "üå¶",
    "—Å–ª–∞–±–∞—è –º–æ—Ä–æ—Å—å": "üå¶",
    "–≥—Ä–æ–∑–∞": "üå©",
    "–≥—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º": "‚õà",
    "—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞": "‚õà",
    "–≥—Ä–æ–∑–∞ —Å –∫—Ä—É–ø–Ω—ã–º –≥—Ä–∞–¥–æ–º": "‚õà",
    "—Å–ª–∞–±—ã–π —Å–Ω–µ–≥": "üå®",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥": "üå®",
    "—Å–Ω–µ–≥–æ–ø–∞–¥": "üå®",
    "—Å–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã": "üå®",
    "—Ç—É–º–∞–Ω": "üå´",
    "–¥—ã–º–∫–∞": "üå´",
    "–º–≥–ª–∞": "üå´",
    "–ø—ã–ª—å": "üå™",
    "–ø–µ—Å–æ–∫": "üå™",
    "–ø–µ–ø–µ–ª": "üåã",
    "—à–∫–≤–∞–ª": "üå¨",
    "—Ç–æ—Ä–Ω–∞–¥–æ": "üå™"
}

dict_weather_icon = {
    # –ì—Ä—É–ø–ø–∞ 800: –Ø—Å–Ω–æ
    "01d": "‚òÄÔ∏è",  # —è—Å–Ω–æ (–¥–µ–Ω—å)
    "01n": "üåô",  # —è—Å–Ω–æ (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 80x: –û–±–ª–∞—á–Ω–æ—Å—Ç—å
    "02d": "üå§",  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–¥–µ–Ω—å)
    "02n": "üå§",  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–Ω–æ—á—å)
    "03d": "‚õÖÔ∏è", # –æ–±–ª–∞—á–Ω–æ (–¥–µ–Ω—å)
    "03n": "‚õÖÔ∏è", # –æ–±–ª–∞—á–Ω–æ (–Ω–æ—á—å)
    "04d": "‚òÅÔ∏è",  # –ø–∞—Å–º—É—Ä–Ω–æ (–¥–µ–Ω—å)
    "04n": "‚òÅÔ∏è",  # –ø–∞—Å–º—É—Ä–Ω–æ (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 3xx: –ú–æ—Ä–æ—Å—å
    "09d": "üåß",  # –º–æ—Ä–æ—Å—å/–ª–∏–≤–µ–Ω—å (–¥–µ–Ω—å)
    "09n": "üåß",  # –º–æ—Ä–æ—Å—å/–ª–∏–≤–µ–Ω—å (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 5xx: –î–æ–∂–¥—å
    "10d": "üå¶",  # –¥–æ–∂–¥—å (–¥–µ–Ω—å)
    "10n": "üå¶",  # –¥–æ–∂–¥—å (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 2xx: –ì—Ä–æ–∑–∞
    "11d": "‚õà",   # –≥—Ä–æ–∑–∞ (–¥–µ–Ω—å)
    "11n": "‚õà",   # –≥—Ä–æ–∑–∞ (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 6xx: –°–Ω–µ–≥
    "13d": "üå®",  # —Å–Ω–µ–≥ (–¥–µ–Ω—å)
    "13n": "üå®",  # —Å–Ω–µ–≥ (–Ω–æ—á—å)

    # –ì—Ä—É–ø–ø–∞ 7xx: –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
    "50d": "üå´",  # —Ç—É–º–∞–Ω/–º–≥–ª–∞/–ø—ã–ª—å/–ø–µ—Å–æ–∫/–¥—ã–º (–¥–µ–Ω—å)
    "50n": "üå´",  # —Ç—É–º–∞–Ω/–º–≥–ª–∞/–ø—ã–ª—å/–ø–µ—Å–æ–∫/–¥—ã–º (–Ω–æ—á—å)

    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    # –ì—Ä—É–ø–ø–∞ 2xx: –ì—Ä–æ–∑–∞
    "200": "‚õà",  # –≥—Ä–æ–∑–∞ —Å–æ —Å–ª–∞–±—ã–º –¥–æ–∂–¥–µ–º
    "201": "‚õà",  # –≥—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º
    "202": "‚õà",  # –≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º
    "210": "üå©",  # –ª–µ–≥–∫–∞—è –≥—Ä–æ–∑–∞
    "211": "üå©",  # –≥—Ä–æ–∑–∞
    "212": "üå©",  # —Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞
    "221": "üå©",  # –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç–∞—è –≥—Ä–æ–∑–∞
    "230": "‚õà",  # –≥—Ä–æ–∑–∞ —Å –ª–µ–≥–∫–æ–π –º–æ—Ä–æ—Å—å—é
    "231": "‚õà",  # –≥—Ä–æ–∑–∞ —Å –º–æ—Ä–æ—Å—å—é
    "232": "‚õà",  # –≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω–æ–π –º–æ—Ä–æ—Å—å—é

    # –ì—Ä—É–ø–ø–∞ 3xx: –ú–æ—Ä–æ—Å—å
    "300": "üå¶",  # –ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å
    "301": "üå¶",  # –º–æ—Ä–æ—Å—å
    "302": "üåß",  # —Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å
    "310": "üå¶",  # –ª–µ–≥–∫–∏–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å
    "311": "üåß",  # –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å
    "312": "üåß",  # —Å–∏–ª—å–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å
    "313": "üåß",  # –¥–æ–∂–¥—å –∏ –º–æ—Ä–æ—Å—å
    "314": "üåß",  # —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å –∏ –º–æ—Ä–æ—Å—å
    "321": "üåß",  # –ª–∏–≤–Ω–µ–≤–∞—è –º–æ—Ä–æ—Å—å

    # –ì—Ä—É–ø–ø–∞ 5xx: –î–æ–∂–¥—å
    "500": "üå¶",  # –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å
    "501": "üåß",  # —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
    "502": "üåß",  # —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    "503": "üåß",  # –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    "504": "üåß",  # —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    "511": "üå®",  # –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
    "520": "üåß",  # –ª–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å
    "521": "üåß",  # –ª–∏–≤–µ–Ω—å
    "522": "üåß",  # —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å
    "531": "üåß",  # –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π –ª–∏–≤–µ–Ω—å

    # –ì—Ä—É–ø–ø–∞ 6xx: –°–Ω–µ–≥
    "600": "üå®",  # –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥
    "601": "‚ùÑÔ∏è",  # —Å–Ω–µ–≥
    "602": "‚ùÑÔ∏è",  # —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥
    "611": "üå®",  # –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
    "612": "üå®",  # –ª–µ–≥–∫–∏–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
    "613": "üå®",  # –ª–∏–≤–Ω–µ–≤—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥
    "615": "üå®",  # –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º
    "616": "üå®",  # –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º
    "620": "üå®",  # –ª–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥
    "621": "üå®",  # —Å–Ω–µ–≥–æ–ø–∞–¥
    "622": "üå®",  # —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥

    # –ì—Ä—É–ø–ø–∞ 7xx: –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
    "701": "üå´",  # –º–≥–ª–∞
    "711": "üå´",  # –¥—ã–º
    "721": "üå´",  # –¥—ã–º–∫–∞
    "731": "üå™",  # –ø–µ—Å—á–∞–Ω—ã–µ/–ø—ã–ª—å–Ω—ã–µ –≤–∏—Ö—Ä–∏
    "741": "üå´",  # —Ç—É–º–∞–Ω
    "751": "üå™",  # –ø–µ—Å–æ–∫
    "761": "üå´",  # –ø—ã–ª—å
    "762": "üåã",  # –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª
    "771": "üí®",  # —à–∫–≤–∞–ª—ã
    "781": "üå™",  # —Ç–æ—Ä–Ω–∞–¥–æ
}

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö
WATER = __("–ü–æ–≥–æ–¥–∞ üåä")
CURRENT = __("–¢–µ–∫—É—â–∏–π ‚è∫")
FOR_3_DAYS = __("–ù–∞ 3 –¥–Ω—è ‚è©")
BACK_TO_MAIN = __("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è")
CITY_BY_NAME = __("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é üèô")


# –∫–Ω–æ–ø–∫–∞ "–ø–æ–≥–æ–¥–∞"
@weather_router.message(F.text == WATER)
async def water_cmd(message: Message, workflow_data: dict):
    user_id = message.from_user.id
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
                         reply_markup=keyboard.get_keyboard(_("–¢–µ–∫—É—â–∏–π ‚è∫"), _("–ù–∞ 3 –¥–Ω—è ‚è©"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                sizes=(2, 1,),
                                                                placeholder='‚¨áÔ∏è'))


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap
def parse_weather_data(type_forecast, city, lat, lon, locale='ru'):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap;
       type_forecast –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –º–æ–º–µ–Ω—Ç–µ, –∏–ª–∏ –Ω–∞ 5 –¥–Ω–µ–π;
       city - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, lat - —à–∏—Ä–æ—Ç–∞, lon - –¥–æ–ª–≥–æ—Ç–∞;
       locale - –ª–æ–∫–∞–ª—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru' """

    url = "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"

    # moment weather
    if type_forecast == 1:
        if city:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={token}&units=metric&lang={locale}"
        elif lat and lon:
            url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={token}&units=metric&lang={locale}"

    # forecast for 5 days with data every 3 hours
    elif type_forecast == 2:
        if city:
            url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={token}&units=metric&lang={locale}'
        elif lat and lon:
            url = f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={token}&units=metric&lang={locale}'

    try:
        req = requests.get(url, timeout=10)
        data = req.json()

    except (requests.RequestException, requests.JSONDecodeError) as e:
        logger.error("–û—à–∏–±–∫–∞: %s", str(e))
        text = _("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç OpenWeatherMap - {e}").format(e=str(e))
        return text

    try:
        if type_forecast == 1:
            temp = data['main']['temp'] # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            humidity = data['main']['humidity'] # –í–ª–∞–∂–Ω–æ—Å—Ç—å, %
            wind = data['wind']['speed'] # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞, –º–µ—Ç—Ä/—Å–µ–∫
            pressure = data['main']['pressure'] # –î–∞–≤–ª–µ–Ω–∏–µ, –º–º.—Ä—Ç.—Å—Ç.
            dt = data['dt'] # –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, unix, UTC
            timezone = data['timezone'] #–°–¥–≤–∏–≥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç UTC
            dt_object = datetime.datetime.fromtimestamp(dt + timezone, tz=datetime.timezone.utc) # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            time = dt_object.strftime('%d-%m-%Y  %H:%M') # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∂–µ–ª–∞–µ–º—ã–π –≤–∏–¥
            name = data['name'] # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            lon = data['coord']['lon']
            lat = data['coord']['lat']
            # description = data['weather'][0]['description']
            icon = data['weather'][0]['icon']
            # emoji = dict_weather_descriptions.get(description, description)
            emoji = dict_weather_icon.get(icon, "‚ùì")

            result = (f"<code>{name}</code>\n<code>{lat}¬∞ {lon}¬∞</code>\n\n"
                            f"<code>{str(round(temp,1))}¬∞C | {str(humidity)}% | {str(round(wind,1))}ùë£ | {str(pressure)}</code>\n{emoji}\n\n"
                            f"<code>{time}</code>")

            return result

        elif type_forecast == 2:
            result = []
            city = data['city']['name']
            lat = data['city']['coord']['lat']
            lon = data['city']['coord']['lon']
            text_head = f'<code>{city}</code>\n<code>{lat}¬∞ {lon}¬∞</code>'
            result.append(text_head)

            timezone = data['city']['timezone']
            weather_list = data['list']
            day = 0
            cnt_day = 0
            for entry in weather_list:
                dt_obj = datetime.datetime.fromtimestamp(entry['dt'] + timezone, tz=datetime.timezone.utc)
                dt = dt_obj.strftime('%d.%m %H:%M')
                temp_celsius = round(entry['main']['temp'],1)
                humidity = entry['main']['humidity']
                # description = entry['weather'][0]['description']
                icon = entry['weather'][0]['icon']
                # emoji = dict_weather_descriptions.get(description, description)
                emoji = dict_weather_icon.get(icon, "‚ùì")
                wind_speed = round(entry['wind']['speed'],1)
                pressure = entry['main']['pressure']
                text = f"{dt[6:]} | {temp_celsius}¬∞ | {humidity}% | {wind_speed}ùë£ | {str(pressure)} | {emoji}"

                if day != int(dt[:2]):
                    day = int(dt[:2])
                    text = '\n' + str(dt[:5]) + '\n' + text
                    cnt_day += 1

                # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 4 –¥–Ω—è –≤ –æ—Ç—á–µ—Ç–µ
                if cnt_day > 3:
                    break

                result.append(text)

            result = "\n".join(result)

            return result

    except (KeyError, TypeError, ValueError) as e:
        logger.error("–û—à–∏–±–∫–∞: %s", str(e))
        text = _("–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ json —Ñ–∞–π–ª–∞ - {e}").format(e=str(e))
        return text


@weather_router.message(F.text == CURRENT)
async def water_moment_cmd(message: Message, state:FSMContext):
    await state.set_state(City.forecast_moment)
    await message.answer(_("–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?"),
                         reply_markup=keyboard.get_keyboard(_("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é üèô"), _("–ü–æ –ª–æ–∫–∞—Ü–∏–∏ üó∫"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 request_location=1,
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))

@weather_router.message(F.text == FOR_3_DAYS)
async def water_period_cmd(message: Message, state: FSMContext):
    await state.set_state(City.forecast_period)
    await message.answer(_("–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?"),
                         reply_markup=keyboard.get_keyboard(_("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é üèô"), _("–ü–æ –ª–æ–∫–∞—Ü–∏–∏ üó∫"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 request_location=1,
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))

# =====================================< –¢–µ–∫—É—â–∏–π ‚è∫ >======================================================

@weather_router.edited_message()
@weather_router.message(City.forecast_moment, F.text == CITY_BY_NAME)
async def city_message_moment(message: Message, state: FSMContext):
    await message.answer(_('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞'), reply_markup=keyboard.del_kb)
    await state.set_state(City.city_name_moment)

@weather_router.message(City.city_name_moment, F.text)
async def process_city_moment(message: Message, state: FSMContext):
    await state.update_data(city_name_moment=message.text)
    city_name_moment = message.text
    data_state = await state.get_data()
    user_locale = data_state.get('locale')
    weather_info = parse_weather_data(1, city=city_name_moment, lat=None, lon=None, locale=user_locale) # type: ignore
    await state.set_state(None)
    await state.update_data(city_name_moment=None)
    await message.answer(weather_info, parse_mode=ParseMode.HTML)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
                         reply_markup=keyboard.get_keyboard(_("–¢–µ–∫—É—â–∏–π ‚è∫"), _("–ù–∞ 3 –¥–Ω—è ‚è©"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))

@weather_router.message(City.city_name_moment)
async def process_city_moment_(message: Message):
    await message.answer(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"))

# =====================================< –ù–∞ 3 –¥–Ω—è ‚è© >======================================================

@weather_router.edited_message()
@weather_router.message(City.forecast_period, F.text == CITY_BY_NAME)
async def city_message_period(message: Message, state: FSMContext):
    await message.answer(_('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞'), reply_markup=keyboard.del_kb)
    await state.set_state(City.city_name_period)

@weather_router.message(City.city_name_period, F.text)
async def process_city_period(message: Message, state: FSMContext):
    await state.update_data(city_name_period=message.text)
    city_name_period = message.text
    data_state = await state.get_data()
    user_locale = data_state.get('locale')
    weather_info = parse_weather_data(2, city=city_name_period, lat=None, lon=None, locale=user_locale) # type: ignore
    await state.set_state(None)
    await state.update_data(city_name_period=None)
    await message.answer(weather_info, parse_mode=ParseMode.HTML)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
                         reply_markup=keyboard.get_keyboard(_("–¢–µ–∫—É—â–∏–π ‚è∫"), _("–ù–∞ 3 –¥–Ω—è ‚è©"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))

@weather_router.message(City.city_name_period)
async def process_city_period_(message: Message):
    await message.answer(_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞"))


@weather_router.edited_message()
@weather_router.message(F.location, City.forecast_moment)
async def loc_message_moment(message: Message, state: FSMContext):
    await message.answer(_('–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞'))
    await state.set_state(None)
    await state.update_data(city_name_moment=None)
    data_state = await state.get_data()
    user_locale = data_state.get('locale')
    weather_info = parse_weather_data(1, city=None, lat=message.location.latitude, lon=message.location.longitude, locale=user_locale) # type: ignore
    await message.answer(weather_info, parse_mode=ParseMode.HTML)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
                         reply_markup=keyboard.get_keyboard(_("–¢–µ–∫—É—â–∏–π ‚è∫"), _("–ù–∞ 3 –¥–Ω—è ‚è©"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))

@weather_router.edited_message()
@weather_router.message(F.location, City.forecast_period)
async def loc_message_period(message: Message, state: FSMContext):
    await message.answer(_('–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞'))
    await state.set_state(None)
    await state.update_data(city_name_period=None)
    data_state = await state.get_data()
    user_locale = data_state.get('locale')
    weather_info = parse_weather_data(2, city=None, lat=message.location.latitude, lon=message.location.longitude, locale=user_locale) # type: ignore
    await message.answer(weather_info, parse_mode=ParseMode.HTML)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
                         reply_markup=keyboard.get_keyboard(_("–¢–µ–∫—É—â–∏–π ‚è∫"), _("–ù–∞ 3 –¥–Ω—è ‚è©"), _("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è"),
                                                                 sizes=(2, 1,),
                                                                 placeholder='‚¨áÔ∏è'))
